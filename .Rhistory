norm_coefs <- rnorm(n = 90, mean = 0, sd = 0.05)
# Next, let's loop through these coefficients and add them to Y
for (i in 1:length(norm_coefs)) { # Notice our loop doesn't need to start at 1
# notice because we want to start with X11, we have to adjust the index for X
Y <- Y + norm_coefs[i]*X[,i+10]
}
# Now we can check Y
Y
## The alternative approach is to first construct a full vector of coefficients,
# then use matrix multiplication to generate a n x 1 vector of outputs:
# i.e. X = n x 100 matrix, beta = 100 x 1 vector, therefore Xbeta = n x 1
# I'll use the norm_coefs vector above to make sure we get the same result
beta <- c(10,-5,rep(0,8),norm_coefs)
# NB: I use rep(0,8) to add 8 zeros to the coefs corresponding to X3-X10
Y_alt <- X %*% beta
# To prove this is equivalent:
sum(Y == Y_alt) # should equal 2000 i.e. every y value is the same
# 3. Estimate a cross-validated LASSO model to find lambda
cv_lambda <- cv.glmnet(x = X, y = Y, alpha = 1, nfolds = 10)$lambda.min
# 4. Estimate a final LASSO model using the results from 3.
final_model <- glmnet(x = X, y = Y, alpha = 1, lambda = cv_lambda)
# Qs. What are the sizes of coefficient X1 X2? Do X3-X10 have non-zero
# coefficients? What about X11-X100?
# Inspect coefficients:
coef(final_model)
# Notice that X1 and X2 have large coefficients -- not quite as large as their
# true value, but not far off. We can see why they are close by looking at lambda
# which is quite a small value (0.16) and therefore it is only adding a small
# bit of bias to the model.
# Fortunately (!) X3-X10 all have exactly missing values -- this is good, because
# we know a priori they have no effect
# For $X11-x100 we see that some are present, and some are missing. If we compare
# these values against the original coefs in norm_coefs you'll see that the
# non-zero coefficients in teh final model match the larger variables within
#### Extension task 2 ####
## Blackwell and Olson propose a slightly more complicated regularization
# procedure in the post-double selection, where they apply separate
# regularisation to each coefficient.
# Further information can be found on pages 14-15 of the article, available here:
# https://mattblackwell.org/files/papers/lasso-inters.pdf
## To see this in action, look at the rlasso_cluster function from line 221 in
# the following file:
# https://github.com/mattblackwell/inters/blob/master/R/lasso_interactions.R
# 1. Using the help file for glmnet, i.e. type `?glmnet` into the console, and
# looking at lines 252-254 in the github file above, what argument is passed to
# glmnet to penalize individual coefficient values?
# 2. Without worrying too much about the surrounding code, describe what
# lines 250-261 are doing algorithmically.
coef(final_model)
?glmnet
# We can call the help file by running:
?glmnet
# For reference, the code is:
cces <- read_csv("../MI project")
cces <- read_csv("../MI project/PA Replication/data/cces_format.csv")
library(tidyverse)
cces <- read_csv("../MI project/PA Replication/data/cces_format.csv")
setwd("~/Dropbox/MI project/PA Replication/data")
cces <- read_csv("cces_format.csv")
setwd("~/Dropbox/oxss_21")
View(cces)
colnames(cces)
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
hadjob, internethome, internetwork, marstat, pid7, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, citylength_1, urbancity, immstat, cit1, union_coverage, unionhh, investor, healthins2,
edloan)
cces$pid7
cces$pid3
summary(cces$pid7)
library(haven)
read_dta("../../Downloads/cces18_common_vv.dta")
cces <- read_dta("../../Downloads/cces18_common_vv.dta")
View(cces)
cces$pid3
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
hadjob, internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, citylength_1, urbancity, immstat, cit1, union_coverage, unionhh, investor, healthins2,
edloan)
cces_Format
cces_format
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
hadjob, internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, citylength_1, urbancity, immstat, cit1, union_coverage, unionhh, investor, healthins2,
edloan) %>%
as_factor()
View(cces_format)
cces_format$birthyr
typeof(cces_format$birthyr)
typeof(cces_format$child18num)
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
hadjob, internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, citylength_1, urbancity, immstat, cit1, union_coverage, unionhh, investor, healthins2,
edloan,CC18_317) %>%
as_factor()
write_csv(cces_format, "data/cces_formatted_oxml.csv")
cces <- read_csv("data/cces_formatted_oxml.csv")
cces <- read.csv("data/cces_formatted_oxml.csv")
View(cces)
cces <- read_dta("../../Downloads/cces18_common_vv.dta")
cces <- read.csv("data/cces_formatted_oxml.csv")
cces$CC18_317
cces <- rename(cces, vote2016 = CC18_317)
cces$vote2016
ncol(cces)
apply(cces,2, function (x) ifelse(is.numeric(x),1,length(unique(x))))
ncol(cces)
unique_cols <- apply(cces,2, function (x) ifelse(is.numeric(x),1,length(unique(x))))
sum(unique_cols)
train_indices <- sample(c(TRUE,FALSE), size = nrow(cces), prob = 0.9)
train_indices <- sample(c(TRUE,FALSE), size = nrow(cces), replace = TRUE, prob = 0.9)
train_indices <- sample(size = nrow(cces), replace = TRUE, prob = 0.9)
train_indices <- sample(x = TRUE, size = nrow(cces), replace = TRUE, prob = 0.9)
train_indices
rbinom
?rbinom
?sample
train_indices <- sample(1:nrow(cces), 50000)
test_indices <-  setdiff(1:nrow(cces), train_indices)
X_train <- cces[train_indices,]
X_test <- cces[test_indices,]
cces$ideo5
cces$votereg
X_train <- cces[train_indices,-"vote2016"]
X_train <- cces[train_indices, !(names(cces) == "vote2016")]
X_test <- cces[test_indices, !(names(cces) == "vote2016")]
Y_train <- cces$vote2016[train_indices]
Y_val <-  cces$vote2016[test_indices]
cces <- na.omit(cces)
View(cces)
cces <- read.csv("data/cces_formatted_oxml.csv")
apply(cces, 2, sum(is.na(x)))
apply(cces, 2, function (x) sum(is.na(x)))
cces <- read.csv("data/cces_formatted_oxml.csv")
cces <- read_dta("../../Downloads/cces18_common_vv.dta")
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, citylength_1, urbancity, immstat, cit1, unionhh, investor,
edloan,CC18_317) %>%
mutate(ifelse(is.na(child18num),0,child18num))
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, citylength_1, urbancity, immstat, cit1, unionhh, investor,
edloan,CC18_317) %>%
mutate(ifelse(is.na(child18num),0,child18num)) %>%
rename(vote2016 = CC18_317)
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, citylength_1, urbancity, immstat, cit1, unionhh, investor,
edloan,CC18_317) %>%
mutate(ifelse(is.na(child18num),0,child18num)) %>%
rename(vote2016 = CC18_317) %>%
as_factor()
write_csv(cces_format, "data/cces_formatted_oxml.csv")
cces <- read.csv("data/cces_formatted_oxml.csv")
cces$vote2016
cces_omit <- na.omit(cces_omit)
cces_omit <- na.omit(cces)
apply(cces,2,sum(is.na()))
apply(cces,2,sum(is.na(.)))
apply(cces,2,sum(is.na)
)
apply(cces,2, function (x) sum(is.na(x))
)
cces <- read.csv("data/cces_formatted_oxml.csv")
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, citylength_1, urbancity, immstat, cit1, unionhh, investor,
CC18_317) %>%
mutate(ifelse(is.na(child18num),0,child18num)) %>%
rename(vote2016 = CC18_317) %>%
as_factor()
# !!! NB: This file is 800MB
cces <- read_dta("https://dataverse.harvard.edu/api/access/datafile/:persistentId?persistentId=doi:10.7910/DVN/ZSBZ7K/H5IDTA")
cces <- read_dta("../../Downloads/cces18_common_vv.dta")
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, citylength_1, urbancity, immstat, cit1, unionhh, investor,
CC18_317) %>%
mutate(ifelse(is.na(child18num),0,child18num)) %>%
rename(vote2016 = CC18_317) %>%
as_factor()
apply(cces, 2, function (x) sum(is.na(x)))
apply(cces_format, 2, function (x) sum(is.na(x)))
na.omit(cces_format)
cces_format <- select(cces_format, -vote2016)
na.omit(cces_format)
cces <- read_dta("../../Downloads/cces18_common_vv.dta")
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, citylength_1, urbancity, immstat, cit1, unionhh, investor,
CC18_317) %>%
mutate(ifelse(is.na(child18num),0,child18num)) %>%
rename(vote2016 = CC18_317) %>%
as_factor() %>%
na.omit()
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, citylength_1, urbancity, immstat, cit1, unionhh, investor,
CC18_317) %>%
mutate(ifelse(is.na(child18num),0,child18num)) %>%
rename(vote2016 = CC18_317) %>%
as_factor() %>%
na.omit(-vote2016)
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, citylength_1, urbancity, immstat, cit1, unionhh, investor) %>%
mutate(ifelse(is.na(child18num),0,child18num)) %>%
as_factor() %>%
na.omit(-vote2016)
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, citylength_1, urbancity, immstat, cit1, unionhh, investor) %>%
mutate(ifelse(is.na(child18num),0,child18num)) %>%
as_factor() %>%
na.omit()
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, citylength_1, urbancity, immstat, cit1, unionhh, investor) %>%
mutate(ifelse(is.na(child18num),0,child18num)) %>%
as_factor()
apply(cces_format, 2, function (x) sum(is.na(x)))
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, urbancity, immstat, cit1, unionhh, investor) %>%
mutate(ifelse(is.na(child18num),0,child18num)) %>%
as_factor()
apply(cces_format, 2, function (x) sum(is.na(x)))
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, urbancity, immstat, cit1, unionhh, investor) %>%
mutate(ifelse(is.na(child18num),0,child18num)) %>%
as_factor()
apply(cces_format, 2, function (x) sum(is.na(x)))
nrow(na.omit(cces_format))
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, urbancity, immstat, cit1, unionhh, investor) %>%
mutate(child18num = ifelse(is.na(child18num),0,child18num)) %>%
as_factor()
apply(cces_format, 2, function (x) sum(is.na(x)))
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, urbancity, immstat, cit1, unionhh, investor) %>%
mutate(child18num = ifelse(is.na(child18num),0,child18num)) %>%
as_factor()
apply(cces_format, 2, function (x) sum(is.na(x)))
nrow(na.omit(cces_format))
# How about the effective number of columns?
unique_cols <- apply(cces_format,2, function (x) ifelse(is.numeric(x),1,length(unique(x))))
sum(unique_cols)
# How about the effective number of columns?
unique_cols <- apply(cces,2, function (x) ifelse(is.numeric(x),1,length(unique(x))))
sum(unique_cols)
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, urbancity, immstat, cit1, unionhh, investor, CC18_317) %>%
mutate(child18num = ifelse(is.na(child18num),0,child18num)) %>%
as_factor()
apply(cces_format, 2, function (x) sum(is.na(x)))
nrow(na.omit(cces_format))
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, urbancity, immstat, cit1, unionhh, investor, CC18_317) %>%
mutate(child18num = ifelse(is.na(child18num),0,child18num)) %>%
as_factor() %>%
na.omit()
cces_format <- cces %>%
select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
ownhome, urbancity, immstat, cit1, unionhh, investor, CC18_317) %>%
mutate(child18num = ifelse(is.na(child18num),0,child18num)) %>%
as_factor() %>%
rename(vote2016 = CC18_317) %>%
na.omit()
write_csv(cces_format, "data/cces_formatted_oxml.csv")
cces <- read.csv("data/cces_formatted_oxml.csv")
# How many columns?
ncol(cces)
# How about the effective number of columns?
unique_cols <- apply(cces,2, function (x) ifelse(is.numeric(x),1,length(unique(x))))
sum(unique_cols)
train_indices <- sample(1:nrow(cces), 30000)
test_indices <-  setdiff(1:nrow(cces), train_indices)
X_train <- cces[train_indices, !(names(cces) == "vote2016")]
X_test <- cces[test_indices, !(names(cces) == "vote2016")]
Y_train <- cces$vote2016[train_indices]
Y_val <-  cces$vote2016[test_indices]
apply(X_train, 2, function (x) sum(is.na(x)))
library(BART)
train_indices <- sample(1:nrow(cces), 30000)
test_indices <-  setdiff(1:nrow(cces), train_indices)
X_train <- cces[train_indices, !(names(cces) == "vote2016")]
X_test <- cces[test_indices, !(names(cces) == "vote2016")]
Y_train <- cces$vote2016[train_indices]
Y_val <-  cces$vote2016[test_indices]
mean(Y_train)
# Full data and codebook available at https://doi.org/10.7910/DVN/ZSBZ7K
library(randomForest)
library(BART)
################################################################################
#### 0. Clean the raw data ####
# # !!! NB: This file is 800MB
# cces <- read_dta("https://dataverse.harvard.edu/api/access/datafile/:persistentId?persistentId=doi:10.7910/DVN/ZSBZ7K/H5IDTA")
# cces <- read_dta("../../Downloads/cces18_common_vv.dta")
#
# cces_format <- cces %>%
#   select(inputstate, birthyr, gender, sexuality, trans, educ, votereg, race, employ,
#          internethome, internetwork, marstat, pid3, ideo5, pew_bornagain,
#          pew_religimp, pew_churatd, pew_prayer, religpew, child18num, newsint, faminc_new,
#          ownhome, urbancity, immstat, cit1, unionhh, investor, CC18_317) %>%
#   mutate(child18num = ifelse(is.na(child18num),0,child18num)) %>%
#   as_factor() %>%
#   rename(vote2016 = CC18_317) %>%
#   na.omit() # Note, I'm having to remove lots of missing data!
#
# apply(cces_format, 2, function (x) sum(is.na(x)))
# nrow(na.omit(cces_format))
#
# write_csv(cces_format, "data/cces_formatted_oxml.csv")
################################################################################
#### 1. Load the data ####
cces <- read.csv("data/cces_formatted_oxml.csv")
## How complex is this data?
# How many columns?
ncol(cces)
# How about the effective number of columns?
unique_cols <- apply(cces,2, function (x) ifelse(is.numeric(x),1,length(unique(x))))
sum(unique_cols)
#### 2. Setup a prediction problem ####
train_indices <- sample(1:nrow(cces), 30000)
test_indices <-  setdiff(1:nrow(cces), train_indices)
X_train <- cces[train_indices, !(names(cces) == "vote2016")]
X_test <- cces[test_indices, !(names(cces) == "vote2016")]
Y_train <- cces$vote2016[train_indices]
Y_val <-  cces$vote2016[test_indices]
is.na(Y_train)
sum(is.na(Y_train))
mean(Y_train)
Y_train
summary(Y_train)
summary(as.factor(Y_train))
summary(as.factor(Y_test))
prop.table(Y_train)
prop.table(as.factor(Y_train))
prop.table(t(as.factor(Y_train)))
?prop.table
prop.table(Y_train ~ .)
prop.table(Freq ~ Y_train)
table(Y_train)
prop.table(table(Y_train))
prop.table(table(Y_test))
prop.table(table(Y_val))
library(randomForest)
X_train <- cces[train_indices,]
X_test <- cces[test_indices, ]
randomForest(vote2016 ~ ., data = X_train, importance = TRUE)
?randomForest
X_train$vote2016 <- as.factor(X_train$vote2016)
X_test$vote2016 <- as.factor(X_test$vote2016)
# Check the proportions of outcomes across sets of data
prop.table(table(Y_train))
prop.table(table(Y_val))
prop.table(table(X_test$vote2016))
randomForest(vote2016 ~ ., data = X_train, importance = TRUE)
train_vars <- c("birthyr", "gender", "sexuality", "trans", "educ", "votereg", "race")
randomForest(vote2016 ~ ., data = X_train[,train_vars], importance = TRUE)
train_vars <- c("vote2016","birthyr", "gender", "sexuality", "trans", "educ", "votereg", "race")
library(randomForest)
randomForest(vote2016 ~ ., data = X_train[,train_vars], importance = TRUE)
read.csv
?read.csv
?read_csv
#### 1. Load the data ####
library(readr)
?read_csv
cces <- read.csv("data/cces_formatted_oxml.csv")
select_vars <- c("vote2016","birthyr", "gender", "sexuality", "trans", "educ", "votereg", "race")
cces <- cces[,select_vars]
train_indices <- sample(1:nrow(cces), 30000)
test_indices <-  setdiff(1:nrow(cces), train_indices)
select_vars <- c("vote2016","birthyr", "gender", "sexuality", "trans", "educ", "votereg", "race")
X_train <- cces[train_indices, select_vars]
X_test <- cces[test_indices, select_vars]
# Convert outcomes to factors so algorithms know to classify
X_train$vote2016 <- as.factor(X_train$vote2016)
X_test$vote2016 <- as.factor(X_test$vote2016)
# Check the proportions of outcomes across sets of data
prop.table(table(X_train$vote2016))
prop.table(table(X_test$vote2016))
install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
randomForest(vote2016 ~ ., data = X_train, importance = TRUE)
?case_When
?case_when
?case_when
# Simplify outcome
cces$vote3 <- case_when(vote2016 == "Donald Trump" ~ "Trump",
vote2016 == "Hillary Clinton" ~ "Clinton",
TRUE ~ "Other")
# Simplify outcome
cces$vote3 <- case_when(cces$vote2016 == "Donald Trump" ~ "Trump",
cces$vote2016 == "Hillary Clinton" ~ "Clinton",
TRUE ~ "Other")
cces$vote3 <- as.factor(cces$vote3)
tup a prediction problem ####
# Simplify outcome
cces$vote3 <- case_when(cces$vote2016 == "Donald Trump" ~ "Trump",
cces$vote2016 == "Hillary Clinton" ~ "Clinton",
TRUE ~ "Other")
cces$vote3 <- as.factor(cces$vote3)
# Split the data into test and train sets
train_indices <- sample(1:nrow(cces), 30000)
test_indices <-  setdiff(1:nrow(cces), train_indices)
# To make this easier on RStudio Cloud, let's only consider a few variables
select_vars <- c("vote3","birthyr", "gender", "sexuality", "trans", "educ", "votereg", "race")
# Combine all the above steps
X_train <- cces[train_indices, select_vars]
X_test <- cces[test_indices, select_vars]
# Check the proportions of outcomes across sets of data
prop.table(table(X_train$vote2016))
# Check the proportions of outcomes across sets of data
prop.table(table(X_train$vote3))
prop.table(table(X_test$vote3))
## Train
randomForest(vote3 ~ ., data = X_train, importance = TRUE)
## Train
rf_model <- randomForest(vote3 ~ ., data = X_train, importance = TRUE)
Y_val <- X_test$vote3
X_test$vote3 <- NULL
X_test
# Extract Y values from test dataset so we can validate the results
Y_val <- X_test$vote3
# Remove Y from test data, because this is the unlabelled data
X_test$vote3 <- NULL
rf_predictions <- predict(rf_model, X_test, type = "class")
rf_predictions
cbind(rf_predictions, Y_val)
test <- cbind(rf_predictions, Y_val)
View(test)
as.factor(rf_predictions)
test <- cbind(as.factor(rf_predictions), Y_val)
test <- cbind(rf = as.factor(rf_predictions), y =Y_val)
rf_comparison <- data.frame(y_pred = as.factor(rf_predictions))
View(rf_comparison)
rf_comparison <- data.frame(y_pred = as.factor(rf_predictions),
y_true = Y_val)
Y_val
# Extract Y values from test dataset so we can validate the results
Y_val <- X_test$vote3
rf_comparison <- data.frame(y_pred = as.factor(rf_predictions),
y_true = Y_val)
X_train <- cces[train_indices, select_vars]
X_test <- cces[test_indices, select_vars]
# Extract Y values from test dataset so we can validate the results
Y_val <- X_test$vote3
# Remove Y from test data, because this is the unlabelled data
X_test$vote3 <- NULL
rf_comparison <- data.frame(y_pred = as.factor(rf_predictions),
y_true = Y_val)
rf_comp <- data.frame(y_pred = rf_predictions,
y_true = Y_val)
rf_predictions <- predict(rf_model, X_test, type = "class")
rf_comp <- data.frame(y_pred = rf_predictions,
y_true = Y_val)
View(rf_comp)
val_acc <- sum(rf_predictions == Y_val)/length(Y_val)
val_acc
rf_comp <- data.frame(y_pred = rf_predictions,
y_true = Y_val)
install.packages("BayesTree")
